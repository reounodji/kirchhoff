<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CancelButton" xml:space="preserve">
    <value>Interrompi</value>
  </data>
  <data name="ContinueButton" xml:space="preserve">
    <value>Avanti</value>
  </data>
  <data name="Instructions" xml:space="preserve">
    <value>Cliccando su "Continua" si conferma di aver letto, compreso e accettato le regole di condotta!</value>
    <comment>3</comment>
  </data>
  <data name="SafetyInformation" xml:space="preserve">
    <value>&lt;li&gt;Nell'area aziendale vigono le norme del codice della strada (StVO) ed è fatto obbligo di indossare il giubbotto di sicurezza e le scarpe antinfortunistiche!&lt;/li&gt;
&lt;li&gt;Guidare a passo d'uomo e prestare attenzione al traffico di persone e veicoli!&lt;/li&gt;
&lt;li&gt;Vanno osservate le disposizioni di legge in materia di sicurezza del carico (§ 22 StVO; StVZO §§ 30; 31; StVO §§ 22; 23; HGB §412)!&lt;/li&gt;
&lt;li&gt;Durante la guida all'interno dell'area aziendale tutte le bocche di carico vanno tenute chiuse o messe in sicurezza!&lt;/li&gt;
&lt;li&gt;Sull'intera aziendale vige il traffico a senso unico!&lt;/li&gt;
&lt;li&gt;Nell'intera area aziendale sono vietati la permanenza da soli o l'accesso dei minori di 16 anni!&lt;/li&gt;
&lt;li&gt;Le persone a seguito, se non coinvolte nelle operazioni di carico e scarico, devono attendere all'interno del veicolo.&lt;/li&gt;
&lt;li&gt;È vietato scattare foto all'interno dell'area aziendale!&lt;/li&gt;
&lt;li&gt;Su quanto è dato vedere o sentire all'interno dello stabilimento vige l'obbligo del silenzio!&lt;/li&gt;
&lt;li&gt;L'intera area aziendale è videosorvegliata!&lt;/li&gt;
&lt;li&gt;Il parcheggio nell'area aziendale è consentito solo se richiesto per le operazioni di carico e scarico!&lt;/li&gt;
&lt;li&gt;Il servizio di sicurezza aziendale può effettuare controlli sui veicoli!&lt;/li&gt;
&lt;li&gt;Vanno seguite in ogni caso le istruzioni dei nostri addetti alla logistica e alla sicurezza!&lt;/li&gt;</value>
    <comment>2</comment>
  </data>
  <data name="SafetyInformationHeader" xml:space="preserve">
    <value>Si prega di prendere nota delle seguenti importanti informazioni:</value>
    <comment>1</comment>
  </data>
</root>